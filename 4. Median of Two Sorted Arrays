-------------------------------------------------
QUESTION
-------------------------------------------------

Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 

Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106


----------------------------------------------------------
SOLUTION
-----------------------------------------------------------

C++
---------------------------
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
       double median;
        int len=nums1.size()+nums2.size();
        vector <int> nums3(len);
        merge(nums1.begin(),nums1.end(),nums2.begin(),nums2.end(),nums3.begin());
        sort(nums3.begin(),nums3.end());
 if(len%2==0)
   {
         
        median=(double)(nums3[index]+nums3[index-1])/2;
       return median;
   }
        return nums3[index]; 
        }
};

--------------------
PYTHON
--------------------

import statistics
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        nums3=[]
        nums3=(nums1+nums2)
        nums3.sort()
        return (statistics.median(nums3))
        

----------------------
JAVASCRIPT
------------------------

var findMedianSortedArrays = function(nums1, nums2) {
    var nums3=[]
    nums3=nums1.concat(nums2)
   nums3 = nums3.sort(
            function (a, b) { return a - b });
        var length = nums3.length;
        if (length % 2 == 1) {
            return nums3[(length / 2) - .5].toFixed(5)
        }
             return ((nums3[length / 2] 
                + nums3[(length / 2) - 1]) / 2).toFixed(5);
};



